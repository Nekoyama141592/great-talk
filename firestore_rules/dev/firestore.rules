rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
        // collectionGroupのルール
    match /{path=**}/users/{postId} {
      allow read: if isAdmin();
    }
    match /{path=**}/posts/{postId} {
      allow read: if isAuthenticated();
    }
    match /public/{version}/users/{uid} {
      allow read: if isAuthenticated();
      allow create: if isTheSameUserAndVerified(uid) && isValidInitialPublicUser(request.resource.data);
      allow update: if isAdmin(); // isOfficialのフラグ設定を行う
      allow delete: if isTheSameUserAndVerified(uid);
      match /posts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isTheSameUserAndVerified(uid) && isValidPost(request.resource.data);
        allow delete: if isTheSameUserAndVerified(uid) || isAdmin();
        match /postLikes/{activeUid} {
          allow create: if isTheSameUserAndVerified(activeUid) && isValidPostLike(request.resource.data);
          allow delete: if isTheSameUserAndVerified(activeUid);
        }
        match /postMutes/{activeUid} {
          allow create: if isTheSameUserAndVerified(activeUid) && isValidPostMute(request.resource.data);
          allow delete: if isTheSameUserAndVerified(activeUid);
        }
      }
      match /followers/{activeUid} {
        allow create: if isTheSameUserAndVerified(activeUid) && isValidFollower(request.resource.data);
        allow delete: if isTheSameUserAndVerified(activeUid);
      }
      match /userMutes/{activeUid} {
        allow create: if isTheSameUserAndVerified(activeUid) && isValidUserMute(request.resource.data);
        allow delete: if isTheSameUserAndVerified(activeUid);
      }
      match /userUpdateLogs/{id} {
        allow create: if isTheSameUserAndVerified(uid) && isValidUserUpdateLog(request.resource.data);
      }
      match /timelines/{postId} {
        allow read: if isTheSameUserAndVerified(uid);
      }
    }
    // Private data
    match /private/{version}/privateUsers/{uid} {
      allow read: if isTheSameUserAndVerified(uid);
      allow create: if isTheSameUserAndVerified(uid) && isValidPrivateUser(request.resource.data);
      match /tokens/{tokenId} {
        allow read, delete: if isTheSameUserAndVerified(uid);
        allow create: if isTheSameUserAndVerified(uid) && isValidToken(request.resource.data);
      }
    }
  }
  function isValidInitialPublicUser(user) {
    return user.size() == 21 &&
      "accountName" in user && user.accountName is string &&
      "bio" in user && isValidDetectedText(user.bio, 200) &&
      "blockCount" in user && user.blockCount == 0 &&
      "createdAt" in user && user.createdAt is timestamp &&
      "ethAddress" in user && user.ethAddress is string &&
      "followerCount" in user && user.followerCount == 0 &&
      "followingCount" in user && user.followingCount == 0 &&
      "isNFTicon" in user && user.isNFTicon is bool &&
      "isOfficial" in user && user.isOfficial is bool &&
      "isSuspended" in user && user.isSuspended is bool &&
      "links" in user && user.links is list &&
      "muteCount" in user && user.muteCount == 0 &&
      "postCount" in user && user.postCount == 0 &&
      "reportCount" in user && user.reportCount == 0 &&
      "score" in user && user.score == 0 &&
      "searchToken" in user && user.searchToken is map &&
      "uid" in user && user.uid is string &&
      "updatedAt" in user && user.updatedAt is timestamp &&
      "image" in user && isValidDetectedImage(user.image) &&
      "userName" in user && isValidDetectedText(user.userName, 32) &&
      "walletAddresses" in user && user.walletAddresses is list;
  }
  
  function isValidPost(post) {
    return post.size() == 21 &&
      "bookmarkCount" in post && post.bookmarkCount == 0 &&
      "createdAt" in post && post.createdAt is timestamp &&
      "customCompleteText" in post && isValidCustomCompleteText(post.customCompleteText) &&
      "description" in post && isValidDetectedText(post.description, 1000) &&
      "exampleTexts" in post && post.exampleTexts is list &&
      "genre" in post && post.genre is string &&
      "hashTags" in post && post.hashTags is list &&
      "image" in post && isValidDetectedImage(post.image) &&
      "impressionCount" in post && post.impressionCount == 0 &&
      "likeCount" in post && post.likeCount == 0 &&
      "links" in post && post.links is list &&
      "msgCount" in post && post.msgCount == 0 &&
      "muteCount" in post && post.muteCount == 0 &&
      "postId" in post && post.postId is string &&
      "reportCount" in post && post.reportCount == 0 &&
      "score" in post && post.score == 0 &&
      "searchToken" in post && post.searchToken is map &&
      "title" in post && isValidDetectedText(post.title,32) &&
      "uid" in post && post.uid is string &&
      "updatedAt" in post && post.updatedAt is timestamp &&
      "userCount" in post && post.userCount == 0;
  }

  function isValidPostLike(postLike) {
    return postLike.size() == 4 &&
      "activeUid" in postLike && postLike.activeUid is string &&
      "createdAt" in postLike && postLike.createdAt is timestamp &&
      "passiveUid" in postLike && postLike.passiveUid is string &&
      "postId" in postLike && postLike.postId is string;
  }

  function isValidPostMute(postMute) {
    return postMute.size() == 3 &&
      "activeUid" in postMute && postMute.activeUid is string &&
      "createdAt" in postMute && postMute.createdAt is timestamp &&
      "postId" in postMute && postMute.postId is string;
  }

  function isValidFollower(follower) {
    return follower.size() == 3
      && "activeUid" in follower && follower.activeUid is string &&
      "createdAt" in follower && follower.createdAt is timestamp &&
      "passiveUid" in follower && follower.passiveUid is string;
  }

  function isValidUserMute(userMute) {
    return userMute.size() == 3
      && "activeUid" in userMute && userMute.activeUid is string &&
      "createdAt" in userMute && userMute.createdAt is timestamp &&
      "passiveUid" in userMute && userMute.passiveUid is string;
  }

  function isValidUserUpdateLog(userUpdateLog) {
    return userUpdateLog.size() == 6
      && "logCreatedAt" in userUpdateLog && userUpdateLog.logCreatedAt is timestamp &&
      "searchToken" in userUpdateLog && userUpdateLog.searchToken is map &&
      "stringBio" in userUpdateLog && userUpdateLog.stringBio is string &&
      "stringUserName" in userUpdateLog && userUpdateLog.stringUserName is string &&
      "uid" in userUpdateLog && userUpdateLog.uid is string &&
      "image" in userUpdateLog && userUpdateLog.image is map;
  }

  function isValidPrivateUser(user) {
    return user.size() == 9
      && "accessToken" in user && user.accessToken is string &&
      "createdAt" in user && user.createdAt is timestamp &&
      "ethAddress" in user && user.ethAddress is string &&
      "fcmToken" in user && user.fcmToken is string &&
      "gender" in user && user.gender is string &&
      "ipAddress" in user && user.ipAddress is string &&
      "isAdmin" in user && user.isAdmin is bool &&
      "uid" in user && user.uid is string &&
      "updatedAt" in user && user.updatedAt is timestamp;
  }

  function isValidToken(token) {
    return "createdAt" in token && token.createdAt is timestamp &&
      "tokenId" in token && token.tokenId is string &&
      "tokenType" in token && token.tokenType is string;
  }
  
  function isValidDetectedText(detectedText,valueLimit) {
    return detectedText.size() == 5
    && "languageCode" in detectedText && detectedText.languageCode is string
    && "negativeScore" in detectedText && detectedText.negativeScore is number
    && "positiveScore" in detectedText && detectedText.positiveScore is number
    && "sentiment" in detectedText && detectedText.sentiment is string
    && "value" in detectedText && detectedText.value is string 
    && detectedText.value.size() <= valueLimit;
  }
  
  function isValidDetectedImage(detectedImage) {
    return detectedImage.size() == 4
    && "bucketName" in detectedImage && detectedImage.bucketName is string
    && "moderationLabels" in detectedImage && detectedImage.moderationLabels is list
    && "moderationModelVersion" in detectedImage && detectedImage.moderationModelVersion is string
    && "value" in detectedImage && detectedImage.value is string;
  }
  function isValidCustomCompleteText(customCompleteText) {
    return customCompleteText.size() == 1
    && "systemPrompt" in customCompleteText 
    && customCompleteText.systemPrompt is string
    && customCompleteText.systemPrompt.size() <= 1000;
  }


  function isAuthenticated() {
  	return request.auth != null;
  }
  function isTheSameUser(uid) {
    return request.auth.uid == uid;
  }
  function isEmailVerifed() {
    return request.auth.token.email_verified;
  }
  function isTheSameUserAndVerified(uid) {
    return isTheSameUser(uid) && isEmailVerifed();
  }
  function isAdmin() {
    return request.auth.uid == "PNVConr4DffKMPD3vJOYhj0M1OB2";
  }
}
