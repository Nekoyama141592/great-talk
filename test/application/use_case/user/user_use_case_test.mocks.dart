// Mocks generated by Mockito 5.4.6 from annotations
// in great_talk/test/application/use_case/user/user_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:great_talk/application/use_case/file/file_use_case.dart' as _i4;
import 'package:great_talk/infrastructure/repository/api_repository.dart'
    as _i3;
import 'package:great_talk/infrastructure/repository/local_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalRepository_0 extends _i1.SmartFake
    implements _i2.LocalRepository {
  _FakeLocalRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeApiRepository_1 extends _i1.SmartFake implements _i3.ApiRepository {
  _FakeApiRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileUseCase extends _i1.Mock implements _i4.FileUseCase {
  MockFileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocalRepository get localRepository =>
      (super.noSuchMethod(
            Invocation.getter(#localRepository),
            returnValue: _FakeLocalRepository_0(
              this,
              Invocation.getter(#localRepository),
            ),
          )
          as _i2.LocalRepository);

  @override
  _i3.ApiRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeApiRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ApiRepository);

  @override
  _i5.Future<String?> getObject(String? bucketName, String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#getObject, [bucketName, fileName]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);
}
